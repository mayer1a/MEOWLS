// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% macro hasValuesBlock assets filter %}
  {%- for asset in assets -%}
    {%- if asset.type == filter -%}
      1
    {%- elif asset.items -%}
      {% call hasValuesBlock asset.items filter %}
    {%- endif -%}
  {%- endfor -%}
{% endmacro %}
{% set enumName %}{{param.enumName|default:"ImagesAsset"}}{% endset %}
{% set imageType %}{{param.imageTypeName|default:"ImageAsset"}}{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
#if os(macOS)

import AppKit

#elseif os(iOS) || os(tvOS) || os(watchOS)

import UIKit

#endif

#if canImport(SwiftUI)

import SwiftUI

#endif

// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Asset Catalogs

{% macro casesBlock assets %}

{% for asset in assets %}
{% if asset.type == "image" %}
    {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{imageType}}(name: "{{asset.value}}")
{% elif ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
    {{accessModifier}} enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% if asset.items %}
      {% filter indent:4," ",true %}{% call casesBlock asset.items %}{% endfilter %}
    {% endif %}
    }
{% endif %}
{% endfor %}

{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
{% for asset in assets %}
{% if asset.type == filter %}
    {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
{% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
{% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
{% call allValuesBlock asset.items filter prefix2 %}
{% elif asset.items %}
{% call allValuesBlock asset.items filter prefix %}
{% endif %}
{% endfor %}
{% endmacro %}
// swiftlint:disable identifier_name line_length nesting type_body_length type_name
{{accessModifier}} enum {{enumName}} {
{% call casesBlock catalogs.first.assets %}
}
// swiftlint:enable identifier_name line_length nesting type_body_length type_name

// MARK: - Implementation Details

{{accessModifier}} struct {{imageType}} {

    {{accessModifier}} fileprivate(set) var name: String

    #if os(macOS)

    {{accessModifier}} typealias Image = NSImage

    #elseif os(iOS) || os(tvOS) || os(watchOS)

    {{accessModifier}} typealias Image = UIImage

    #endif

    @available(iOS 8.0, tvOS 9.0, watchOS 2.0, macOS 10.7, *)
    {{accessModifier}} var image: Image {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}

        #if os(iOS) || os(tvOS)

        let image = Image(named: name, in: bundle, compatibleWith: nil)

        #elseif os(macOS)

        let name = NSImage.Name(self.name)
        let image = (bundle == .main) ? NSImage(named: name) : bundle.image(forResource: name)

        #elseif os(watchOS)

        let image = Image(named: name)

        #endif

        guard let result = image else {
        fatalError("Unable to load image asset named \(name).")
        }
        return result
    }

    #if os(iOS) || os(tvOS)

    @available(iOS 8.0, tvOS 9.0, *)
    {{accessModifier}} func image(compatibleWith traitCollection: UITraitCollection) -> Image {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}
        guard let result = Image(named: name, in: bundle, compatibleWith: traitCollection) else {
            fatalError("Unable to load image asset named \(name).")
        }
        return result
    }

    #endif

    #if canImport(SwiftUI)

    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    {{accessModifier}} var swiftUIImage: SwiftUI.Image {
        SwiftUI.Image(asset: self)
    }

    #endif

}

#if canImport(SwiftUI)

@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
{{accessModifier}} extension SwiftUI.Image {

    init(asset: {{imageType}}) {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}
        self.init(asset.name, bundle: bundle)
    }

    init(asset: {{imageType}}, label: Text) {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}
        self.init(asset.name, bundle: bundle, label: label)
    }

    init(decorative asset: {{imageType}}) {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}
        self.init(decorative: asset.name, bundle: bundle)
    }

}

#endif

{% if not param.bundle %}

// swiftlint:disable convenience_type
private final class BundleToken {

    static let bundle: Bundle = {
        #if SWIFT_PACKAGE

        return Bundle.module

        #else

        return Bundle(for: BundleToken.self)

        #endif
    }()

}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No assets found
{% endif %}
