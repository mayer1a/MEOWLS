// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% macro hasValuesBlock assets filter %}
  {%- for asset in assets -%}
    {%- if asset.type == filter -%}
      1
    {%- elif asset.items -%}
      {% call hasValuesBlock asset.items filter %}
    {%- endif -%}
  {%- endfor -%}
{% endmacro %}
{% set enumName %}{{param.enumName|default:"ColorsAsset"}}{% endset %}
{% set colorType %}{{param.colorTypeName|default:"ColorAsset"}}{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
#if os(macOS)

import AppKit

#elseif os(iOS) || os(tvOS) || os(watchOS)

import UIKit

#endif

#if canImport(SwiftUI)

import SwiftUI

#endif

// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Asset Catalogs

{% macro casesBlock assets %}

{% for asset in assets %}
{% if asset.type == "color" %}
    {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{colorType}}(name: "{{asset.value}}")
{% elif ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
    {{accessModifier}} enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% if asset.items %}
      {% filter indent:4," ",true %}{% call casesBlock asset.items %}{% endfilter %}
    {% endif %}
    }
{% endif %}
{% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
{% for asset in assets %}
{% if asset.type == filter %}
    {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
{% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
{% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
{% call allValuesBlock asset.items filter prefix2 %}
{% elif asset.items %}
{% call allValuesBlock asset.items filter prefix %}
{% endif %}
{% endfor %}
{% endmacro %}
// swiftlint:disable identifier_name line_length nesting type_body_length type_name
{{accessModifier}} enum {{enumName}} {
{% call casesBlock catalogs.first.assets %}

}
// swiftlint:enable identifier_name line_length nesting type_body_length type_name

// MARK: - Implementation Details

{{accessModifier}} final class {{colorType}} {

    {{accessModifier}} fileprivate(set) var name: String

    #if os(macOS)

    {{accessModifier}} typealias Color = NSColor

    #elseif os(iOS) || os(tvOS) || os(watchOS)

    {{accessModifier}} typealias Color = UIColor

    #endif

    @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, *)
    {{accessModifier}} private(set) lazy var color: Color = {
        guard let color = Color(asset: self) else {
            fatalError("Unable to load color asset named \(name).")
        }
        return color
    }()

    #if os(iOS) || os(tvOS)

    @available(iOS 11.0, tvOS 11.0, *)
    {{accessModifier}} func color(compatibleWith traitCollection: UITraitCollection) -> Color {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}
        guard let color = Color(named: name, in: bundle, compatibleWith: traitCollection) else {
          fatalError("Unable to load color asset named \(name).")
        }
        return color
    }

    #endif

    #if canImport(SwiftUI)

    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    {{accessModifier}} private(set) lazy var swiftUIColor: SwiftUI.Color = {
        SwiftUI.Color(asset: self)
    }()

    #endif

    public init(name: String) {
        self.name = name
    }

}

{{accessModifier}} extension {{colorType}}.Color {

    @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, *)
    convenience init?(asset: {{colorType}}) {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}

        #if os(iOS) || os(tvOS)

        self.init(named: asset.name, in: bundle, compatibleWith: nil)

        #elseif os(macOS)

        self.init(named: NSColor.Name(asset.name), bundle: bundle)

        #elseif os(watchOS)

        self.init(named: asset.name)

        #endif
    }

}

#if canImport(SwiftUI)
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
{{accessModifier}} extension SwiftUI.Color {

    init(asset: {{colorType}}) {
        let bundle = {{param.bundle|default:"BundleToken.bundle"}}
        self.init(asset.name, bundle: bundle)
    }

}
#endif

{% if not param.bundle %}

// swiftlint:disable convenience_type
private final class BundleToken {

    static let bundle: Bundle = {
        #if SWIFT_PACKAGE

        return Bundle.module

        #else

        return Bundle(for: BundleToken.self)

        #endif
    }()

}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No assets found
{% endif %}
